package ast;

import org.antlr.v4.runtime.Token;
import visitor.DefaultVisitor;
import visitor.GenericVisitor;
import visitor.VoidVisitor;

import java.util.Arrays;
import java.util.Objects;

/**
 * The class generated by the asm tool during instrumentation.
 *
 * @author Ben
 */
public class BytecodeAST extends SourceAST {

  private String name_;
  private byte[] bytes_;

  public BytecodeAST() {
    this(null, null);
  }

  public BytecodeAST(final String name, final byte[] bytes) {
    this(null, name, bytes);
  }

  public BytecodeAST(Token token, final String name, final byte[] bytes) {
    super(token);
    setName(name);
    setBytes(bytes);
  }

  public BytecodeAST setName(final String name) {
    if (Objects.equals(name, name_)) {
      return this;
    }
    name_ = name;
    return this;
  }

  public String getName() {
    return name_;
  }

  public BytecodeAST setBytes(final byte[] bytes) {
    if (Arrays.equals(bytes, bytes_)) {
      return this;
    }
    bytes_ = bytes;
    return this;
  }

  public byte[] getBytes() {
    return bytes_;
  }

  @Override
  public <T, A> T accept(GenericVisitor<T, A> v, A arg) {
    return v.visit(this, arg);
  }

  @Override
  public <A> void accept(VoidVisitor<A> v, A arg) {
    v.visit(this, arg);
  }

  @Override
  public <T> T accept(DefaultVisitor<T> v) {
    return v.visit(this);
  }
}
